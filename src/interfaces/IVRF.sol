// SPDX-License-Identifier: MIT LICENSE
pragma solidity ^0.8.20;

// Constant ID for VRF system identification
uint256 constant VRF_SYSTEM_ID = uint256(keccak256("app.osdraw.vrfsystem.v1"));

/**
 * Interface for verifiable random function (VRF) providers
 */
interface IVRFSystem {
    /**
     * Starts a VRF random number request
     *
     * @param traceId Optional Id to use when tracing the request
     * @return requestId for the random number, will be passed to the callback contract
     */
    function requestRandomNumberWithTraceId(uint256 traceId) external returns (uint256);

    /**
     * Event emitted when a random number is requested
     */
    event RandomNumberRequested(
        uint256 indexed requestId, 
        address indexed callbackAddress, 
        uint256 indexed traceId
    );

    /**
     * Event emitted when a random number is delivered to the callback
     */
    event RandomNumberDelivered(
        uint256 indexed requestId,
        address indexed callbackAddress,
        uint256 indexed traceId,
        uint256 roundNumber,
        uint256 randomNumber
    );
}

/**
 * Interface for contracts that handle VRF callbacks
 */
interface IVRFSystemCallback {
    /**
     * Callback for when a Random Number is delivered
     *
     * @param requestId     Id of the VRF request
     * @param randomNumber  Random number that was generated by the VRF
     */
    function randomNumberCallback(uint256 requestId, uint256 randomNumber) external;
} 